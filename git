# add all modified files to staging
git add -A

# list modified files and their status
git status

# commit
git commit (-m for adding a message directly)

# push to origin master
git push origin master

# create a git repository
git init

# cloning an existing repository
git clone [url]

# show status of tracked files
git status

# show short status
git status -s (or --short)

# track new files / add changes to next commit
git add [filename]

# track new files, patch mode
git add -p 

# track new files, interactive mode
git add -i

# ignoring files
add filenames or patterns to .gitignore file

# show differences for unstaged files
git diff

# show differences for staged files
git diff --staged (or --cached, both are synonyms)

# commit directly (skipping staging)
git commit -a -m "[message]"

# remove a file from working directy (this will also remove it from file system)
git rm [filename]

# remove a file from staging, but keep on file system and keep tracking
git rm --cached [filename]

# move (or rename) a file
git mv [old path] [new path]

# show commit history
git log

# show commit history with differences introduced in each commit
git log -p

# show short history (one line)
git log --pretty=oneline

# show log graph with ascii visualization
git log --graph

# change last commit (add or remove files, etc) and modify commit message
git commit --amend -m "[message]"

# unstage a file
git reset [filename]

# revert a changed file
git checkout -- [filename]

# show remotes of working directory (-v shows URLs)
git remote -v

# add a remote
git remote add [shortname] [url]

# difference between fetch and pull
1) fetch will only download data, but not merge
2) pull will fetch and try to merge the changes to the current working directory

# fetching from remote
git fetch [remote] (optional: [branch])

# pulling from remote
git pull [remote]

# show additional information about remote
git remote show [remote]

# renaming a remote
git remote rename [old remote name] [new name]

# removing a remote
git rm [remote]

# list tags
git tag

# create annotated tag
git tag -a [tag name] -m [message]

# creating a lightweight tag
git tag [tag name]

# show tag data
git show show [tag name]

# tagging an existing commit
git tag -a [tag-name] [commit checksum]

# pushing a single tag to remote
git push [remote] [tag name]

# pushing all tags to remote
git push [remote] --tags

# checking out a tag
git checkout -b [branchname] [tagname]

# create a new branch (branch from current checked out)
git branch [branch name]

# delete a branch
git branch -d [branch name]

# run garbage collection
git gc